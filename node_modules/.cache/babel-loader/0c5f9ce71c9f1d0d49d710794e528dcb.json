{"ast":null,"code":"var _jsxFileName = \"/Users/balthazarely/Development/scrolling-picker-app/src/components/Spinner/SpinnerWrapper.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { calculateSpinnerDistance, getRandomInt } from \"../../utls\";\nimport { Spinner } from \"./Spinner\";\nimport { InfoPannel } from \"../InfoPannel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SpinnerWrapper = () => {\n  _s();\n\n  const [staticNameArray, setStaticNameArray] = useState([]);\n  const [nameArray, setNameArray] = useState([]);\n  const [whoHasGoneArray, setWhoHasGoneArray] = useState([]); // Game Variables\n\n  let moveDistance;\n  const [rotations, setRotations] = useState(30);\n  const [duration, setDuration] = useState(0.5);\n  const [currentName, setCurrentName] = useState();\n  const [gameActive, setGameActive] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isSpinning, setIsSpinning] = useState(false); // Game Logic\n\n  const pickRandomName = () => {\n    let randomInt = getRandomInt(nameArray.length);\n    let selectedName = nameArray[randomInt];\n    setWhoHasGoneArray([...whoHasGoneArray, selectedName]);\n    setNameArray(nameArray.filter(name => name !== selectedName));\n    moveDistance = calculateSpinnerDistance(currentName, selectedName, rotations, staticNameArray);\n    setCurrentName(selectedName);\n  };\n\n  const checkIfCompleted = () => {\n    if (nameArray.length === 1) {\n      // setGameOver(true);\n      setGameActive(false);\n      console.log(\"game over\");\n    }\n  };\n\n  const nextButtonClick = () => {\n    if (gameActive && !gsap.isTweening(\".box\")) {\n      setGameActive(true);\n      checkIfCompleted();\n      pickRandomName();\n      setIsSpinning(true);\n      const tl = gsap.timeline();\n      tl.to(\".box\", duration, {\n        ease: \"power4.inOut\",\n        y: `+=${moveDistance}`,\n        modifiers: {\n          y: y => parseFloat(y) % (staticNameArray.length * 50) + \"px\"\n        }\n      }).call(() => {\n        setIsSpinning(false);\n      });\n    }\n  };\n\n  useEffect(() => {\n    async function getPeople() {\n      let response = await fetch(\"http://wheelofstandup-api-dev.azurewebsites.net/People\");\n      let data = await response.json();\n      let names = await data.filter(person => person.isEnabled).map(person => person.name);\n      console.log(names);\n      setNameArray(names);\n      setStaticNameArray(names);\n      setCurrentName(names[5]);\n    }\n\n    getPeople(); // setCurrentName(nameArray[5]);\n  }, []);\n  useEffect(() => {\n    gsap.set(\".box\", {\n      y: i => i * 50\n    });\n  }, [staticNameArray]);\n  const spinnerDimensions = {\n    height: \"450px\",\n    border: \"1px solid teal\"\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" md:flex-row flex-col flex \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 w-full h-full flex flex-col items-center justify-center  overflow-hidden relative\",\n        style: spinnerDimensions,\n        children: /*#__PURE__*/_jsxDEV(Spinner, {\n          staticNameArray: staticNameArray,\n          currentName: currentName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoPannel, {\n        isSpinning: isSpinning,\n        gameActive: gameActive,\n        nextButtonClick: nextButtonClick,\n        currentName: currentName,\n        nameArray: nameArray,\n        whoHasGoneArray: whoHasGoneArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SpinnerWrapper, \"y5jyna7xyyxsL6kiEUm4KFD4B90=\");\n\n_c = SpinnerWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpinnerWrapper\");","map":{"version":3,"sources":["/Users/balthazarely/Development/scrolling-picker-app/src/components/Spinner/SpinnerWrapper.jsx"],"names":["React","useEffect","useState","gsap","calculateSpinnerDistance","getRandomInt","Spinner","InfoPannel","SpinnerWrapper","staticNameArray","setStaticNameArray","nameArray","setNameArray","whoHasGoneArray","setWhoHasGoneArray","moveDistance","rotations","setRotations","duration","setDuration","currentName","setCurrentName","gameActive","setGameActive","gameOver","setGameOver","isSpinning","setIsSpinning","pickRandomName","randomInt","length","selectedName","filter","name","checkIfCompleted","console","log","nextButtonClick","isTweening","tl","timeline","to","ease","y","modifiers","parseFloat","call","getPeople","response","fetch","data","json","names","person","isEnabled","map","set","i","spinnerDimensions","height","border"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { calculateSpinnerDistance, getRandomInt } from \"../../utls\";\nimport { Spinner } from \"./Spinner\";\nimport { InfoPannel } from \"../InfoPannel\";\n\nexport const SpinnerWrapper = () => {\n  const [staticNameArray, setStaticNameArray] = useState([]);\n  const [nameArray, setNameArray] = useState([]);\n  const [whoHasGoneArray, setWhoHasGoneArray] = useState([]);\n\n  // Game Variables\n  let moveDistance;\n  const [rotations, setRotations] = useState(30);\n  const [duration, setDuration] = useState(0.5);\n  const [currentName, setCurrentName] = useState();\n  const [gameActive, setGameActive] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isSpinning, setIsSpinning] = useState(false);\n\n  // Game Logic\n  const pickRandomName = () => {\n    let randomInt = getRandomInt(nameArray.length);\n    let selectedName = nameArray[randomInt];\n    setWhoHasGoneArray([...whoHasGoneArray, selectedName]);\n    setNameArray(nameArray.filter((name) => name !== selectedName));\n    moveDistance = calculateSpinnerDistance(\n      currentName,\n      selectedName,\n      rotations,\n      staticNameArray\n    );\n    setCurrentName(selectedName);\n  };\n\n  const checkIfCompleted = () => {\n    if (nameArray.length === 1) {\n      // setGameOver(true);\n      setGameActive(false);\n      console.log(\"game over\");\n    }\n  };\n\n  const nextButtonClick = () => {\n    if (gameActive && !gsap.isTweening(\".box\")) {\n      setGameActive(true);\n      checkIfCompleted();\n      pickRandomName();\n      setIsSpinning(true);\n      const tl = gsap.timeline();\n      tl.to(\".box\", duration, {\n        ease: \"power4.inOut\",\n        y: `+=${moveDistance}`,\n        modifiers: {\n          y: (y) => (parseFloat(y) % (staticNameArray.length * 50)) + \"px\",\n        },\n      }).call(() => {\n        setIsSpinning(false);\n      });\n    }\n  };\n\n  useEffect(() => {\n    async function getPeople() {\n      let response = await fetch(\n        \"http://wheelofstandup-api-dev.azurewebsites.net/People\"\n      );\n      let data = await response.json();\n      let names = await data\n        .filter((person) => person.isEnabled)\n        .map((person) => person.name);\n\n      console.log(names);\n      setNameArray(names);\n      setStaticNameArray(names);\n      setCurrentName(names[5]);\n    }\n    getPeople();\n    // setCurrentName(nameArray[5]);\n  }, []);\n\n  useEffect(() => {\n    gsap.set(\".box\", {\n      y: (i) => i * 50,\n    });\n  }, [staticNameArray]);\n\n  const spinnerDimensions = {\n    height: \"450px\",\n    border: \"1px solid teal\",\n  };\n\n  return (\n    <>\n      <div className=\" md:flex-row flex-col flex \">\n        <div\n          className=\"flex-1 w-full h-full flex flex-col items-center justify-center  overflow-hidden relative\"\n          style={spinnerDimensions}\n        >\n          <Spinner\n            staticNameArray={staticNameArray}\n            currentName={currentName}\n          />\n        </div>\n        <InfoPannel\n          isSpinning={isSpinning}\n          gameActive={gameActive}\n          nextButtonClick={nextButtonClick}\n          currentName={currentName}\n          nameArray={nameArray}\n          whoHasGoneArray={whoHasGoneArray}\n        />\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}