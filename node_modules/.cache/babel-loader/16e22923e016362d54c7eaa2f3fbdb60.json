{"ast":null,"code":"export const getRandomInt = max => Math.floor(Math.random() * max);\nexport const calculateSpinnerDistance = (currentName, selectedName, rotations, staticNameArray) => {\n  let currentNamePosition = staticNameArray.indexOf(currentName);\n  let selectedNamePosition = staticNameArray.indexOf(selectedName);\n  let distanceToTravel = currentNamePosition - selectedNamePosition;\n\n  if (distanceToTravel === 0) {\n    return staticNameArray.length * 50 * rotations;\n  }\n\n  if (distanceToTravel < 0) {\n    return Math.abs((distanceToTravel + staticNameArray.length) * 50 + staticNameArray.length * 50 * rotations);\n  }\n\n  if (distanceToTravel > 0) {\n    return Math.abs(distanceToTravel * 50 + staticNameArray.length * 50 * rotations);\n  }\n};\nexport const calcMultiplier = arr => {\n  switch (arr.length) {\n    case 2:\n      return 5;\n      break;\n\n    case 3:\n      return 4;\n      break;\n\n    case 4:\n      return 3;\n      break;\n\n    case 5:\n      return 3;\n      break;\n\n    case 6:\n      return 2;\n      break;\n\n    case 7:\n      return 2;\n      break;\n\n    case 8:\n      return 2;\n      break;\n\n    case 9:\n      return 2;\n      break;\n\n    default:\n      return 1;\n  }\n};\nexport const duplicateArr = arr => {\n  let times = calcMultiplier(arr);\n  return Array(times).fill([...arr]).reduce((a, b) => a.concat(b));\n};","map":{"version":3,"sources":["/Users/balthazarely/Development/scrolling-picker-app/src/utls.jsx"],"names":["getRandomInt","max","Math","floor","random","calculateSpinnerDistance","currentName","selectedName","rotations","staticNameArray","currentNamePosition","indexOf","selectedNamePosition","distanceToTravel","length","abs","calcMultiplier","arr","duplicateArr","times","Array","fill","reduce","a","b","concat"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,GAAD,IAASC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAA9B;AAEP,OAAO,MAAMI,wBAAwB,GAAG,CACtCC,WADsC,EAEtCC,YAFsC,EAGtCC,SAHsC,EAItCC,eAJsC,KAKnC;AACH,MAAIC,mBAAmB,GAAGD,eAAe,CAACE,OAAhB,CAAwBL,WAAxB,CAA1B;AACA,MAAIM,oBAAoB,GAAGH,eAAe,CAACE,OAAhB,CAAwBJ,YAAxB,CAA3B;AACA,MAAIM,gBAAgB,GAAGH,mBAAmB,GAAGE,oBAA7C;;AACA,MAAIC,gBAAgB,KAAK,CAAzB,EAA4B;AAC1B,WAAOJ,eAAe,CAACK,MAAhB,GAAyB,EAAzB,GAA8BN,SAArC;AACD;;AACD,MAAIK,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,WAAOX,IAAI,CAACa,GAAL,CACL,CAACF,gBAAgB,GAAGJ,eAAe,CAACK,MAApC,IAA8C,EAA9C,GACEL,eAAe,CAACK,MAAhB,GAAyB,EAAzB,GAA8BN,SAF3B,CAAP;AAID;;AACD,MAAIK,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,WAAOX,IAAI,CAACa,GAAL,CACLF,gBAAgB,GAAG,EAAnB,GAAwBJ,eAAe,CAACK,MAAhB,GAAyB,EAAzB,GAA8BN,SADjD,CAAP;AAGD;AACF,CAvBM;AAyBP,OAAO,MAAMQ,cAAc,GAAIC,GAAD,IAAS;AACrC,UAAQA,GAAG,CAACH,MAAZ;AACE,SAAK,CAAL;AACE,aAAO,CAAP;AACA;;AACF,SAAK,CAAL;AACE,aAAO,CAAP;AACA;;AACF,SAAK,CAAL;AACE,aAAO,CAAP;AACA;;AACF,SAAK,CAAL;AACE,aAAO,CAAP;AACA;;AACF,SAAK,CAAL;AACE,aAAO,CAAP;AACA;;AACF,SAAK,CAAL;AACE,aAAO,CAAP;AACA;;AACF,SAAK,CAAL;AACE,aAAO,CAAP;AACA;;AACF,SAAK,CAAL;AACE,aAAO,CAAP;AACA;;AACF;AACE,aAAO,CAAP;AA1BJ;AA4BD,CA7BM;AA+BP,OAAO,MAAMI,YAAY,GAAID,GAAD,IAAS;AACnC,MAAIE,KAAK,GAAGH,cAAc,CAACC,GAAD,CAA1B;AACA,SAAOG,KAAK,CAACD,KAAD,CAAL,CACJE,IADI,CACC,CAAC,GAAGJ,GAAJ,CADD,EAEJK,MAFI,CAEG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,MAAF,CAASD,CAAT,CAFb,CAAP;AAGD,CALM","sourcesContent":["export const getRandomInt = (max) => Math.floor(Math.random() * max);\n\nexport const calculateSpinnerDistance = (\n  currentName,\n  selectedName,\n  rotations,\n  staticNameArray\n) => {\n  let currentNamePosition = staticNameArray.indexOf(currentName);\n  let selectedNamePosition = staticNameArray.indexOf(selectedName);\n  let distanceToTravel = currentNamePosition - selectedNamePosition;\n  if (distanceToTravel === 0) {\n    return staticNameArray.length * 50 * rotations;\n  }\n  if (distanceToTravel < 0) {\n    return Math.abs(\n      (distanceToTravel + staticNameArray.length) * 50 +\n        staticNameArray.length * 50 * rotations\n    );\n  }\n  if (distanceToTravel > 0) {\n    return Math.abs(\n      distanceToTravel * 50 + staticNameArray.length * 50 * rotations\n    );\n  }\n};\n\nexport const calcMultiplier = (arr) => {\n  switch (arr.length) {\n    case 2:\n      return 5;\n      break;\n    case 3:\n      return 4;\n      break;\n    case 4:\n      return 3;\n      break;\n    case 5:\n      return 3;\n      break;\n    case 6:\n      return 2;\n      break;\n    case 7:\n      return 2;\n      break;\n    case 8:\n      return 2;\n      break;\n    case 9:\n      return 2;\n      break;\n    default:\n      return 1;\n  }\n};\n\nexport const duplicateArr = (arr) => {\n  let times = calcMultiplier(arr);\n  return Array(times)\n    .fill([...arr])\n    .reduce((a, b) => a.concat(b));\n};\n"]},"metadata":{},"sourceType":"module"}