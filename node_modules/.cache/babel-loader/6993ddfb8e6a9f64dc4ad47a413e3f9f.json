{"ast":null,"code":"var _jsxFileName = \"/Users/balthazarely/Development/scrolling-picker-app/src/components/Spinner/SpinnerWrapper.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { calculateSpinnerDistance, getRandomInt } from \"../../utls\";\nimport { Spinner } from \"./Spinner\";\nimport { SpinnerBtn } from \"./SpinnerBtn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SpinnerWrapper = () => {\n  _s();\n\n  const [staticNameArray, setStaticNameArray] = useState([]);\n  const [nameArray, setNameArray] = useState([]);\n  const [whoHasGoneArray, setWhoHasGoneArray] = useState([]); // Game Variables\n\n  let moveDistance;\n  const [rotations, setRotations] = useState(10);\n  const [duration, setDuration] = useState(0.3);\n  const [currentName, setCurrentName] = useState();\n  const [gameActive, setGameActive] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isSpinning, setIsSpinning] = useState(false); // Game Logic\n\n  const pickRandomName = () => {\n    let randomInt = getRandomInt(nameArray.length);\n    let selectedName = nameArray[randomInt];\n    setWhoHasGoneArray([...whoHasGoneArray, selectedName]);\n    setNameArray(nameArray.filter(name => name !== selectedName));\n    moveDistance = calculateSpinnerDistance(currentName, selectedName, rotations, staticNameArray);\n    setCurrentName(selectedName);\n  };\n\n  const checkIfCompleted = () => {\n    if (nameArray.length === 1) {\n      setGameOver(true);\n      setGameActive(false);\n      console.log(\"game over\");\n    }\n  };\n\n  const nextButtonClick = () => {\n    if (!gameOver && !gsap.isTweening(\".box\")) {\n      setGameActive(true);\n      checkIfCompleted();\n      pickRandomName();\n      setIsSpinning(true);\n      const tl = gsap.timeline();\n      tl.to(\".box\", duration, {\n        ease: \"power4.inOut\",\n        y: `+=${moveDistance}`,\n        modifiers: {\n          y: y => parseFloat(y) % (staticNameArray.length * 50) + \"px\"\n        }\n      }).call(() => {\n        setIsSpinning(false);\n      });\n    }\n  };\n\n  useEffect(() => {\n    async function getPeople() {\n      let response = await fetch(\"http://wheelofstandup-api-dev.azurewebsites.net/People\");\n      let data = await response.json();\n      let names = await data.filter(person => person.isEnabled).map(person => person.name).slice(0, 6);\n      console.log(names);\n      setNameArray(names);\n      setStaticNameArray(names);\n      setCurrentName(names[4]);\n    }\n\n    getPeople();\n  }, []);\n  useEffect(() => {\n    gsap.set(\".box\", {\n      y: i => i * 50\n    });\n  }, [staticNameArray]);\n  const spinnerDimensions = {\n    height: \"500px\",\n    border: \"12px solid teal\"\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" md:flex-row flex-col flex \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 w-full h-full flex flex-col items-center justify-center overflow-hidden relative\",\n        style: spinnerDimensions,\n        children: [/*#__PURE__*/_jsxDEV(SpinnerBtn, {\n          nextButtonClick: nextButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n          staticNameArray: staticNameArray,\n          currentName: currentName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-5xl flex-1 text-white font-extrabold text-center \",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current__name__wrapper h-24  flex items-center justify-center\",\n          children: [!isSpinning && gameActive && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current__name\",\n            children: currentName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), gameOver && !gameActive && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current__name\",\n            children: \"Game Over\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-lg text-white\",\n          children: [\"is game active:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-yellow-400\",\n            children: gameActive ? \"True\" : \"False\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-lg text-white\",\n          children: [\"is spinning:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-yellow-400\",\n            children: isSpinning ? \"True\" : \"False\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-lg text-white\",\n          children: [\"remaining people:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-yellow-400\",\n            children: nameArray.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-lg text-white font-black mt-5\",\n          children: \"Who Has Gone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), whoHasGoneArray.map(name => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-yellow-400\",\n          children: name\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SpinnerWrapper, \"t8EYw54V31JTrp+PCJ/qD3ZE3Nc=\");\n\n_c = SpinnerWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpinnerWrapper\");","map":{"version":3,"sources":["/Users/balthazarely/Development/scrolling-picker-app/src/components/Spinner/SpinnerWrapper.jsx"],"names":["React","useEffect","useState","gsap","calculateSpinnerDistance","getRandomInt","Spinner","SpinnerBtn","SpinnerWrapper","staticNameArray","setStaticNameArray","nameArray","setNameArray","whoHasGoneArray","setWhoHasGoneArray","moveDistance","rotations","setRotations","duration","setDuration","currentName","setCurrentName","gameActive","setGameActive","gameOver","setGameOver","isSpinning","setIsSpinning","pickRandomName","randomInt","length","selectedName","filter","name","checkIfCompleted","console","log","nextButtonClick","isTweening","tl","timeline","to","ease","y","modifiers","parseFloat","call","getPeople","response","fetch","data","json","names","person","isEnabled","map","slice","set","i","spinnerDimensions","height","border"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { calculateSpinnerDistance, getRandomInt } from \"../../utls\";\nimport { Spinner } from \"./Spinner\";\nimport { SpinnerBtn } from \"./SpinnerBtn\";\n\nexport const SpinnerWrapper = () => {\n  const [staticNameArray, setStaticNameArray] = useState([]);\n  const [nameArray, setNameArray] = useState([]);\n  const [whoHasGoneArray, setWhoHasGoneArray] = useState([]);\n\n  // Game Variables\n  let moveDistance;\n  const [rotations, setRotations] = useState(10);\n  const [duration, setDuration] = useState(0.3);\n  const [currentName, setCurrentName] = useState();\n  const [gameActive, setGameActive] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isSpinning, setIsSpinning] = useState(false);\n\n  // Game Logic\n  const pickRandomName = () => {\n    let randomInt = getRandomInt(nameArray.length);\n    let selectedName = nameArray[randomInt];\n    setWhoHasGoneArray([...whoHasGoneArray, selectedName]);\n    setNameArray(nameArray.filter((name) => name !== selectedName));\n    moveDistance = calculateSpinnerDistance(\n      currentName,\n      selectedName,\n      rotations,\n      staticNameArray\n    );\n    setCurrentName(selectedName);\n  };\n\n  const checkIfCompleted = () => {\n    if (nameArray.length === 1) {\n      setGameOver(true);\n      setGameActive(false);\n      console.log(\"game over\");\n    }\n  };\n\n  const nextButtonClick = () => {\n    if (!gameOver && !gsap.isTweening(\".box\")) {\n      setGameActive(true);\n      checkIfCompleted();\n      pickRandomName();\n      setIsSpinning(true);\n      const tl = gsap.timeline();\n      tl.to(\".box\", duration, {\n        ease: \"power4.inOut\",\n        y: `+=${moveDistance}`,\n        modifiers: {\n          y: (y) => (parseFloat(y) % (staticNameArray.length * 50)) + \"px\",\n        },\n      }).call(() => {\n        setIsSpinning(false);\n      });\n    }\n  };\n\n  useEffect(() => {\n    async function getPeople() {\n      let response = await fetch(\n        \"http://wheelofstandup-api-dev.azurewebsites.net/People\"\n      );\n      let data = await response.json();\n      let names = await data\n        .filter((person) => person.isEnabled)\n        .map((person) => person.name)\n        .slice(0, 6);\n\n      console.log(names);\n      setNameArray(names);\n      setStaticNameArray(names);\n      setCurrentName(names[4]);\n    }\n    getPeople();\n  }, []);\n\n  useEffect(() => {\n    gsap.set(\".box\", {\n      y: (i) => i * 50,\n    });\n  }, [staticNameArray]);\n\n  const spinnerDimensions = {\n    height: \"500px\",\n    border: \"12px solid teal\",\n  };\n\n  return (\n    <>\n      <div className=\" md:flex-row flex-col flex \">\n        <div\n          className=\"flex-1 w-full h-full flex flex-col items-center justify-center overflow-hidden relative\"\n          style={spinnerDimensions}\n        >\n          <SpinnerBtn nextButtonClick={nextButtonClick} />\n          <Spinner\n            staticNameArray={staticNameArray}\n            currentName={currentName}\n          />\n        </div>\n\n        <div className=\"text-5xl flex-1 text-white font-extrabold text-center \">\n          <div className=\"current__name__wrapper h-24  flex items-center justify-center\">\n            {!isSpinning && gameActive && (\n              <div className=\"current__name\">{currentName}</div>\n            )}\n            {gameOver && !gameActive && (\n              <div className=\"current__name\">Game Over</div>\n            )}\n          </div>\n          <div className=\"text-lg text-white\">\n            is game active:{\" \"}\n            <span className=\"text-yellow-400\">\n              {gameActive ? \"True\" : \"False\"}\n            </span>\n          </div>\n          <div className=\"text-lg text-white\">\n            is spinning:{\" \"}\n            <span className=\"text-yellow-400\">\n              {isSpinning ? \"True\" : \"False\"}\n            </span>\n          </div>\n          <div className=\"text-lg text-white\">\n            remaining people:{\" \"}\n            <span className=\"text-yellow-400\">{nameArray.length}</span>\n          </div>\n          <div className=\"text-lg text-white font-black mt-5\">Who Has Gone</div>\n          {whoHasGoneArray.map((name) => (\n            <div className=\"text-sm text-yellow-400\" key={name}>\n              {name}\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}