{"ast":null,"code":"var _jsxFileName = \"/Users/balthazarely/Development/scrolling-picker-app/src/components/Spinner/SpinnerWrapper.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { getRandomInt } from \"../../utls\";\nimport { Spinner } from \"./Spinner\";\nimport { SpinnerBtn } from \"./SpinnerBtn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SpinnerWrapper = () => {\n  _s();\n\n  const [staticNameArray, setStaticNameArray] = useState([]);\n  const [nameArray, setNameArray] = useState([]);\n  const [whoHasGoneArray, setWhoHasGoneArray] = useState([]); // Game Variables\n\n  const [rotations, setRotations] = useState(2);\n  const [speed, setSpeed] = useState(1);\n  const [currentName, setCurrentName] = useState();\n  const [gameOver, setGameOver] = useState(false);\n  const [isSpinning, setisSpinning] = useState(false);\n  const [moveDistance, setMoveDistance] = useState(); // let moveDistance;\n  // Game Logic\n\n  const pickRandomName = () => {\n    let randomInt = getRandomInt(nameArray.length);\n    let selectedName = nameArray[randomInt];\n    setNameArray(nameArray.filter(name => name !== selectedName));\n    setWhoHasGoneArray([...whoHasGoneArray, selectedName]);\n    console.log(whoHasGoneArray); // Static Array Operations\n\n    let currentNamePosition = staticNameArray.indexOf(currentName);\n    let selectedNamePosition = staticNameArray.indexOf(selectedName);\n    console.log(\"current\", currentName, \"selected\", selectedName);\n    console.log(\"current Names position in array\", currentNamePosition);\n    console.log(\"selected Names position in array\", selectedNamePosition);\n    let distanceToTravel = currentNamePosition - selectedNamePosition;\n\n    if (distanceToTravel === 0) {\n      setMoveDistance(staticNameArray.length * 50 * rotations);\n    }\n\n    if (distanceToTravel < 0) {\n      setMoveDistance(Math.abs((distanceToTravel + staticNameArray.length) * 50 + staticNameArray.length * 50 * rotations));\n    }\n\n    if (distanceToTravel > 0) {\n      setMoveDistance(Math.abs(distanceToTravel * 50 + staticNameArray.length * 50 * rotations));\n    }\n\n    setCurrentName(selectedName);\n  };\n\n  const checkIfCompleted = () => {\n    if (nameArray.length === 1) {\n      setGameOver(true);\n      console.log(\"game over\");\n    }\n  };\n\n  const nextButtonClick = () => {\n    if (!gameOver && !gsap.isTweening(\".box\")) {\n      pickRandomName();\n      const tl = gsap.timeline();\n      tl.call(() => {\n        setisSpinning(true);\n      }).to(\".box\", speed, {\n        ease: \"power4.inOut\",\n        y: `+=${moveDistance}`,\n        modifiers: {\n          y: y => parseFloat(y) % (staticNameArray.length * 50) + \"px\"\n        }\n      }).call(() => {\n        setisSpinning(false);\n      });\n      checkIfCompleted();\n    }\n  };\n\n  useEffect(() => {\n    async function getPeople() {\n      let response = await fetch(\"http://wheelofstandup-api-dev.azurewebsites.net/People\");\n      let data = await response.json();\n      let names = await data.filter(person => person.isEnabled).map(person => person.name);\n      console.log(names);\n      setNameArray(names);\n      setStaticNameArray(names);\n      setCurrentName(names[4]);\n    }\n\n    getPeople();\n  }, []);\n  useEffect(() => {\n    gsap.set(\".box\", {\n      y: i => i * 50\n    });\n  }, [staticNameArray]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spin__page__wrapper flex md:flex-row flex-col \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 border-4 border-purple-500 w-full h-full flex flex-col items-center justify-center \",\n        children: [/*#__PURE__*/_jsxDEV(SpinnerBtn, {\n          nextButtonClick: nextButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n          staticNameArray: staticNameArray,\n          currentName: currentName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-5xl flex-1 text-white font-extrabold text-center border-red-200 border-2\",\n        children: [currentName, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-lg text-white\",\n          children: [\"is spinning: \", isSpinning ? \"True\" : \"False\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-lg text-white font-bold\",\n          children: \"Who Has Gone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), whoHasGoneArray.map(name => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-white font-base\",\n          children: name\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SpinnerWrapper, \"G8uCYeYad+NamVvG5wZWdZt4kHs=\");\n\n_c = SpinnerWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpinnerWrapper\");","map":{"version":3,"sources":["/Users/balthazarely/Development/scrolling-picker-app/src/components/Spinner/SpinnerWrapper.jsx"],"names":["React","useEffect","useState","gsap","getRandomInt","Spinner","SpinnerBtn","SpinnerWrapper","staticNameArray","setStaticNameArray","nameArray","setNameArray","whoHasGoneArray","setWhoHasGoneArray","rotations","setRotations","speed","setSpeed","currentName","setCurrentName","gameOver","setGameOver","isSpinning","setisSpinning","moveDistance","setMoveDistance","pickRandomName","randomInt","length","selectedName","filter","name","console","log","currentNamePosition","indexOf","selectedNamePosition","distanceToTravel","Math","abs","checkIfCompleted","nextButtonClick","isTweening","tl","timeline","call","to","ease","y","modifiers","parseFloat","getPeople","response","fetch","data","json","names","person","isEnabled","map","set","i"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { getRandomInt } from \"../../utls\";\nimport { Spinner } from \"./Spinner\";\nimport { SpinnerBtn } from \"./SpinnerBtn\";\n\nexport const SpinnerWrapper = () => {\n  const [staticNameArray, setStaticNameArray] = useState([]);\n  const [nameArray, setNameArray] = useState([]);\n  const [whoHasGoneArray, setWhoHasGoneArray] = useState([]);\n\n  // Game Variables\n  const [rotations, setRotations] = useState(2);\n  const [speed, setSpeed] = useState(1);\n  const [currentName, setCurrentName] = useState();\n  const [gameOver, setGameOver] = useState(false);\n  const [isSpinning, setisSpinning] = useState(false);\n  const [moveDistance, setMoveDistance] = useState();\n  // let moveDistance;\n\n  // Game Logic\n  const pickRandomName = () => {\n    let randomInt = getRandomInt(nameArray.length);\n    let selectedName = nameArray[randomInt];\n    setNameArray(nameArray.filter((name) => name !== selectedName));\n    setWhoHasGoneArray([...whoHasGoneArray, selectedName]);\n    console.log(whoHasGoneArray);\n    // Static Array Operations\n    let currentNamePosition = staticNameArray.indexOf(currentName);\n    let selectedNamePosition = staticNameArray.indexOf(selectedName);\n    console.log(\"current\", currentName, \"selected\", selectedName);\n    console.log(\"current Names position in array\", currentNamePosition);\n    console.log(\"selected Names position in array\", selectedNamePosition);\n    let distanceToTravel = currentNamePosition - selectedNamePosition;\n\n    if (distanceToTravel === 0) {\n      setMoveDistance(staticNameArray.length * 50 * rotations);\n    }\n\n    if (distanceToTravel < 0) {\n      setMoveDistance(\n        Math.abs(\n          (distanceToTravel + staticNameArray.length) * 50 +\n            staticNameArray.length * 50 * rotations\n        )\n      );\n    }\n    if (distanceToTravel > 0) {\n      setMoveDistance(\n        Math.abs(\n          distanceToTravel * 50 + staticNameArray.length * 50 * rotations\n        )\n      );\n    }\n\n    setCurrentName(selectedName);\n  };\n\n  const checkIfCompleted = () => {\n    if (nameArray.length === 1) {\n      setGameOver(true);\n      console.log(\"game over\");\n    }\n  };\n\n  const nextButtonClick = () => {\n    if (!gameOver && !gsap.isTweening(\".box\")) {\n      pickRandomName();\n      const tl = gsap.timeline();\n      tl.call(() => {\n        setisSpinning(true);\n      })\n        .to(\".box\", speed, {\n          ease: \"power4.inOut\",\n          y: `+=${moveDistance}`,\n          modifiers: {\n            y: (y) => (parseFloat(y) % (staticNameArray.length * 50)) + \"px\",\n          },\n        })\n        .call(() => {\n          setisSpinning(false);\n        });\n      checkIfCompleted();\n    }\n  };\n\n  useEffect(() => {\n    async function getPeople() {\n      let response = await fetch(\n        \"http://wheelofstandup-api-dev.azurewebsites.net/People\"\n      );\n      let data = await response.json();\n      let names = await data\n        .filter((person) => person.isEnabled)\n        .map((person) => person.name);\n\n      console.log(names);\n      setNameArray(names);\n      setStaticNameArray(names);\n      setCurrentName(names[4]);\n    }\n    getPeople();\n  }, []);\n\n  useEffect(() => {\n    gsap.set(\".box\", {\n      y: (i) => i * 50,\n    });\n  }, [staticNameArray]);\n\n  return (\n    <>\n      <div className=\"spin__page__wrapper flex md:flex-row flex-col \">\n        <div className=\"flex-1 border-4 border-purple-500 w-full h-full flex flex-col items-center justify-center \">\n          <SpinnerBtn nextButtonClick={nextButtonClick} />\n          <Spinner\n            staticNameArray={staticNameArray}\n            currentName={currentName}\n          />\n        </div>\n\n        <div className=\"text-5xl flex-1 text-white font-extrabold text-center border-red-200 border-2\">\n          {currentName}\n          <div className=\"text-lg text-white\">\n            is spinning: {isSpinning ? \"True\" : \"False\"}\n          </div>\n          <div className=\"text-lg text-white font-bold\">Who Has Gone</div>\n          {whoHasGoneArray.map((name) => (\n            <div className=\"text-sm text-white font-base\" key={name}>\n              {name}\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}