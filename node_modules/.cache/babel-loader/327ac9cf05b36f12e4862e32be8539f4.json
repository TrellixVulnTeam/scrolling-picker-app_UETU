{"ast":null,"code":"var _jsxFileName = \"/Users/balthazarely/Development/scrolling-picker-app/src/components/Spinner/SpinnerWrapper.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { calcMultiplier, calculateSpinnerDistance, duplicateArr, getRandomInt } from \"../../utls\";\nimport { Spinner } from \"./Spinner\";\nimport { InfoPannel } from \"../InfoPannel\";\nimport { getAllPeople } from \"../../api/People\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SpinnerWrapper = () => {\n  _s();\n\n  const [staticNameArray, setStaticNameArray] = useState([]);\n  const [nameArray, setNameArray] = useState([]);\n  const [whoHasGoneArray, setWhoHasGoneArray] = useState([]); // Game Variables\n\n  let moveDistance;\n  const [rotations, setRotations] = useState(30);\n  const [duration, setDuration] = useState(2);\n  const [currentName, setCurrentName] = useState();\n  const [gameActive, setGameActive] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isSpinning, setIsSpinning] = useState(false);\n  let selectedName; // Game Logic\n\n  const pickRandomName = () => {\n    let randomInt = getRandomInt(nameArray.length);\n    selectedName = nameArray[randomInt];\n    setNameArray(nameArray.filter(name => name !== selectedName));\n    moveDistance = calculateSpinnerDistance(currentName, selectedName, rotations, staticNameArray);\n    setCurrentName(selectedName);\n  };\n\n  const addNameToCompleted = () => {\n    setWhoHasGoneArray([...whoHasGoneArray, selectedName]);\n  };\n\n  const checkIfCompleted = () => {\n    if (nameArray.length === 1) {\n      setGameOver(true);\n    }\n  };\n\n  const nextButtonClick = () => {\n    console.log(nameArray, staticNameArray);\n\n    if (!gameOver && !gsap.isTweening(\".box\")) {\n      setGameActive(true);\n      checkIfCompleted();\n      pickRandomName();\n      setIsSpinning(true);\n      const tl = gsap.timeline();\n      tl.to(\".box\", duration, {\n        ease: \"power4.inOut\",\n        y: `+=${moveDistance}`,\n        modifiers: {\n          y: y => parseFloat(y) % (staticNameArray.length * 50) + \"px\"\n        }\n      }).call(() => {\n        setIsSpinning(false);\n        addNameToCompleted();\n      });\n    }\n\n    if (gameOver) {\n      setCurrentName(\"GAME OVER\");\n    }\n  };\n\n  async function getPeople() {\n    const people = [\"Jessica\", \"Josh\"]; // let response = getAllPeople();\n    // let data = await response;\n    // let people = await data.data\n    //   .filter((person) => person.isEnabled)\n    //   .map((person) => person.name);\n\n    let peopleMultiplied = duplicateArr(people, calcMultiplier(people));\n    console.log(peopleMultiplied);\n    setNameArray(people);\n    setStaticNameArray(peopleMultiplied);\n    setCurrentName(peopleMultiplied[5]);\n  }\n\n  const resetGame = () => {// setGameOver(false);\n    // getPeople();\n    // setWhoHasGoneArray([]);\n  };\n\n  useEffect(() => {\n    getPeople();\n  }, []);\n  useEffect(() => {\n    gsap.set(\".box\", {\n      y: i => i * 50\n    });\n  }, [staticNameArray]);\n  const spinnerDimensions = {\n    height: \"450px\",\n    border: \"1px solid teal\"\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" md:flex-row flex-col flex \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 w-full h-full flex flex-col items-center justify-center  overflow-hidden relative\",\n        style: spinnerDimensions,\n        children: /*#__PURE__*/_jsxDEV(Spinner, {\n          staticNameArray: staticNameArray,\n          currentName: currentName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => resetGame(),\n        children: \"reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoPannel, {\n        isSpinning: isSpinning,\n        gameActive: gameActive,\n        nextButtonClick: nextButtonClick,\n        currentName: currentName,\n        nameArray: nameArray,\n        whoHasGoneArray: whoHasGoneArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SpinnerWrapper, \"1T9l5NZ59xRS7JxGps8BhCWTabo=\");\n\n_c = SpinnerWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpinnerWrapper\");","map":{"version":3,"sources":["/Users/balthazarely/Development/scrolling-picker-app/src/components/Spinner/SpinnerWrapper.jsx"],"names":["React","useEffect","useState","gsap","calcMultiplier","calculateSpinnerDistance","duplicateArr","getRandomInt","Spinner","InfoPannel","getAllPeople","SpinnerWrapper","staticNameArray","setStaticNameArray","nameArray","setNameArray","whoHasGoneArray","setWhoHasGoneArray","moveDistance","rotations","setRotations","duration","setDuration","currentName","setCurrentName","gameActive","setGameActive","gameOver","setGameOver","isSpinning","setIsSpinning","selectedName","pickRandomName","randomInt","length","filter","name","addNameToCompleted","checkIfCompleted","nextButtonClick","console","log","isTweening","tl","timeline","to","ease","y","modifiers","parseFloat","call","getPeople","people","peopleMultiplied","resetGame","set","i","spinnerDimensions","height","border"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport {\n  calcMultiplier,\n  calculateSpinnerDistance,\n  duplicateArr,\n  getRandomInt,\n} from \"../../utls\";\nimport { Spinner } from \"./Spinner\";\nimport { InfoPannel } from \"../InfoPannel\";\nimport { getAllPeople } from \"../../api/People\";\n\nexport const SpinnerWrapper = () => {\n  const [staticNameArray, setStaticNameArray] = useState([]);\n  const [nameArray, setNameArray] = useState([]);\n  const [whoHasGoneArray, setWhoHasGoneArray] = useState([]);\n\n  // Game Variables\n  let moveDistance;\n  const [rotations, setRotations] = useState(30);\n  const [duration, setDuration] = useState(2);\n  const [currentName, setCurrentName] = useState();\n  const [gameActive, setGameActive] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isSpinning, setIsSpinning] = useState(false);\n  let selectedName;\n\n  // Game Logic\n  const pickRandomName = () => {\n    let randomInt = getRandomInt(nameArray.length);\n    selectedName = nameArray[randomInt];\n\n    setNameArray(nameArray.filter((name) => name !== selectedName));\n    moveDistance = calculateSpinnerDistance(\n      currentName,\n      selectedName,\n      rotations,\n      staticNameArray\n    );\n    setCurrentName(selectedName);\n  };\n\n  const addNameToCompleted = () => {\n    setWhoHasGoneArray([...whoHasGoneArray, selectedName]);\n  };\n\n  const checkIfCompleted = () => {\n    if (nameArray.length === 1) {\n      setGameOver(true);\n    }\n  };\n\n  const nextButtonClick = () => {\n    console.log(nameArray, staticNameArray);\n    if (!gameOver && !gsap.isTweening(\".box\")) {\n      setGameActive(true);\n      checkIfCompleted();\n      pickRandomName();\n      setIsSpinning(true);\n      const tl = gsap.timeline();\n      tl.to(\".box\", duration, {\n        ease: \"power4.inOut\",\n        y: `+=${moveDistance}`,\n        modifiers: {\n          y: (y) => (parseFloat(y) % (staticNameArray.length * 50)) + \"px\",\n        },\n      }).call(() => {\n        setIsSpinning(false);\n        addNameToCompleted();\n      });\n    }\n    if (gameOver) {\n      setCurrentName(\"GAME OVER\");\n    }\n  };\n\n  async function getPeople() {\n    const people = [\"Jessica\", \"Josh\"];\n    // let response = getAllPeople();\n    // let data = await response;\n    // let people = await data.data\n    //   .filter((person) => person.isEnabled)\n    //   .map((person) => person.name);\n    let peopleMultiplied = duplicateArr(people, calcMultiplier(people));\n    console.log(peopleMultiplied);\n    setNameArray(people);\n    setStaticNameArray(peopleMultiplied);\n    setCurrentName(peopleMultiplied[5]);\n  }\n\n  const resetGame = () => {\n    // setGameOver(false);\n    // getPeople();\n    // setWhoHasGoneArray([]);\n  };\n\n  useEffect(() => {\n    getPeople();\n  }, []);\n\n  useEffect(() => {\n    gsap.set(\".box\", {\n      y: (i) => i * 50,\n    });\n  }, [staticNameArray]);\n\n  const spinnerDimensions = {\n    height: \"450px\",\n    border: \"1px solid teal\",\n  };\n\n  return (\n    <>\n      <div className=\" md:flex-row flex-col flex \">\n        <div\n          className=\"flex-1 w-full h-full flex flex-col items-center justify-center  overflow-hidden relative\"\n          style={spinnerDimensions}\n        >\n          <Spinner\n            staticNameArray={staticNameArray}\n            currentName={currentName}\n          />\n        </div>\n        <button onClick={() => resetGame()}>reset</button>\n        <InfoPannel\n          isSpinning={isSpinning}\n          gameActive={gameActive}\n          nextButtonClick={nextButtonClick}\n          currentName={currentName}\n          nameArray={nameArray}\n          whoHasGoneArray={whoHasGoneArray}\n        />\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}